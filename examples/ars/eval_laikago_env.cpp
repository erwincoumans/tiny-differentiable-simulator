// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <fstream>
#include <iostream>
#include <streambuf>
#include <string>

#include "dynamics/forward_dynamics.hpp"
#include "dynamics/integrator.hpp"
//#include "math/tiny/tiny_double_utils.h"
#include "math/tiny/tiny_float_utils.h"
#include "urdf/urdf_cache.hpp"
#include "urdf/urdf_parser.hpp"
#include "urdf/urdf_to_multi_body.hpp"
#include "utils/file_utils.hpp"

#ifdef USE_MESHCAT
#include "visualizer/meshcat/meshcat_urdf_visualizer.h"
#else
#include "../opengl_urdf_visualizer.h"
#endif

#include "../environments/laikago_environment2.h"
//#include "../environments/ant_environment.h"

using namespace TINY;
using namespace tds;

typedef float TinyDualScalar;
typedef float MyScalar;
typedef ::TINY::FloatUtils MyTinyConstants;
#include "math/tiny/tiny_algebra.hpp"
//typedef TinyAlgebra<float, MyTinyConstants> MyAlgebra;
typedef TinyAlgebra<float, MyTinyConstants> MyAlgebra;

//typedef TinyVector3<float, DoubleUtils> Vector3;
//typedef TinyQuaternion<float, DoubleUtils> Quaternion;

int frameskip_gfx_sync = 1;  // use 60Hz, no need for skipping

bool do_sim = true;


typedef LaikagoEnv<MyAlgebra> Environment;
typedef LocomotionContactSimulation<MyAlgebra> RobotSim;

//typedef AntEnv<MyAlgebra> Environment;
//typedef AntContactSimulation<MyAlgebra> RobotSim;


int main(int argc, char* argv[]) {
#ifdef USE_MESHCAT
  MeshcatUrdfVisualizer<MyAlgebra> visualizer;
#else
  OpenGLUrdfVisualizer<MyAlgebra> visualizer;
#endif
  std::cout << "Waiting for meshcat server" << std::endl;
  visualizer.delete_all();


  int sync_counter = 0;
  int frame = 0;
  
  int num_total_threads = 1;
  std::vector<int> visual_instances;
  std::vector<int> num_instances;
  int num_base_instances;

  Environment env(true);
  
  visualizer.m_path_prefix = env.contact_sim.urdf_full_path_;
  int obs_dim = env.contact_sim.input_dim();
  auto urdf_structures = env.contact_sim.cache.retrieve(env.contact_sim.urdf_filename_);
  std::string texture_path = "laikago_tex.jpg";
  visualizer.convert_visuals(urdf_structures, texture_path,env.contact_sim.mb_);
  
  

  auto obs = env.reset();
  float total_reward = 0;
  int max_steps = 10000;
  int num_steps = 0;

  int num_params =
      env.neural_network.num_weights() + env.neural_network.num_biases();

  // weights trained using cuda ars_train_policy (without observation filter)
  std::vector<MyScalar> x = {
     /* laikago1:*/ //-1.024009,-1.167130,-0.212025,-0.829941,-0.273994,-0.148460,1.821351,-0.008527,-1.221866,0.195666,0.146996,0.696743,-0.525982,-1.097170,0.490754,-0.241558,1.065449,-0.380558,-1.050630,0.308037,-0.142067,-1.179885,-0.496169,1.016328,-0.130788,-0.043931,-0.653800,-0.773284,-1.009611,-0.248459,-0.175081,0.669306,0.354670,1.079551,-1.193381,-0.270898,-0.158505,0.954343,0.314342,0.941326,0.021687,-0.058339,-0.412108,-0.299077,-0.148040,-1.439724,-0.059109,0.323666,0.732352,0.000947,-0.030328,-0.947481,0.156621,1.061755,-0.398034,-0.384337,-0.952475,0.257197,-0.879942,-1.633425,-0.252664,-0.318770,-1.568318,-1.421026,-0.830230,-0.273782,-2.093512,0.076287,0.550527,-0.187230,-0.586794,0.051669,1.168355,0.906764,-0.677444,1.016172,1.493360,1.091976,0.296339,0.050524,-0.783648,-0.442927,-0.562023,-0.310711,-0.549703,-0.189479,-1.145583,0.768910,-0.440370,0.090838,-0.257266,-0.567644,-0.073137,-1.070842,-1.029749,0.416818,-0.867967,0.007064,0.428393,-0.913034,-0.335825,-1.565874,-0.648598,-0.465493,-0.510110,0.214119,1.062448,-1.298511,0.804992,1.261290,0.584169,1.509129,-0.174545,1.078239,0.238281,-0.994011,-0.609788,-0.471459,0.129356,1.151229,-0.531041,-0.980764,-0.660611,0.049122,-0.567801,1.342441,-0.236984,0.327149,-0.219317,0.509572,-0.488522,-0.750293,0.504004,0.069844,-0.555572,0.149783,-0.217336,0.039563,-0.590840,-0.904153,-0.450911,-0.856312,-0.400225,0.034225,-1.116851,0.247301,-0.166395,0.412200,-0.802118,-0.684978,0.582958,-1.107287,-0.133631,0.056548,0.353572,-1.008300,-0.814079,0.083801,0.740471,-0.891174,-0.349347,-0.229587,0.048187,-0.467476,0.166362,0.741277,-1.065255,0.430241,-0.783233,-0.173187,-0.337646,0.593896,-0.007433,-0.117950,0.434430,0.007546,1.535838,-0.131552,0.843968,0.095349,0.725714,-0.139262,0.454836,-0.005489,-1.911685,1.202686,-0.261819,0.456705,1.095504,0.183617,0.585056,-0.424727,-0.953210,0.074815,-0.458590,0.329668,0.253313,-0.351883,0.004429,1.234280,0.427876,0.908479,0.024525,-0.842219,-0.490234,0.089740,-0.073792,0.727478,1.215637,-0.185624,-0.798466,0.873113,-0.546460,0.094263,0.286351,0.202212,0.257139,1.041244,0.051206,-0.663238,-0.146773,-0.700868,0.212235,-0.899636,-0.860275,0.206659,-0.090233,0.428950,-0.445425,0.736481,-0.233128,0.046280,0.063832,-0.500105,0.438843,0.078293,-1.001570,-0.356427,0.356302,0.592247,-1.413688,-0.708577,-0.720305,1.234820,-0.904009,-0.920797,1.209445,0.309717,-0.622491,-0.649218,-1.400727,0.372739,-0.864222,-0.612138,-0.869983,-0.304616,-1.051172,-0.366344,0.685831,-1.132432,1.625677,-1.520959,-0.837923,-0.166270,1.402440,-0.746718,0.264934,-0.224849,-1.270860,-1.318869,-0.439593,-0.382674,-1.355617,0.274099,-0.369310,0.223229,0.314427,-0.926561,-0.739600,-0.354946,0.040546,-0.955849,1.348909,-0.019784,-2.208257,2.244482,-0.228526,0.659558,-0.580893,-0.660414,-0.513863,-0.581139,0.291775,0.453255,0.478284,0.196670,0.170652,-1.355485,0.888373,-0.132018,-0.327787,0.084208,-0.499657,-0.555718,0.100185,-1.636744,0.594724,-0.600484,-0.693374,0.242877,-1.150809,-0.067117,0.568556,0.504186,-1.077051,0.343385,-1.031525,-0.786424,0.484443,-0.101926,-0.130258,0.858376,-0.638546,0.479734,-0.778824,-0.525962,0.982941,-0.304821,1.939588,0.791862,-1.091768,0.141781,-1.724098,-0.401051,0.941279,0.701412,-0.571245,-0.256577,-0.342780,0.837048,1.358877,1.581108,1.569313,-0.295512,-0.006756,0.395507,-1.060294,-0.894360,-0.636358,-0.649481,0.555612,0.356170,1.622832,0.673341,-0.387073,0.024839,-0.915457,1.045895,-0.709479,-0.966932,0.532160,0.291561,0.426083,-0.756131,0.907425,-0.051521,-0.014702,-0.278753,-0.350683,0.892835,0.930383,-0.845727,-0.961489,0.960855,-0.423828,-0.161644,-0.342394,0.218690,0.108977,0.693223,0.038843,-0.309003,-1.060946,-1.501375,0.168902,0.100711,-0.327109,-0.334881,-0.583961,1.685187,0.375654,0.216059,1.521304,0.570726,0.055949,-0.020855,0.098630,0.719223,-1.232700,0.752166,-0.443604,-0.106655,0.280946,0.406308,0.138565,-2.083566,-0.374718,-0.628707,-1.276878,0.488956,-1.261894,0.086277,0.527915,0.251887,-0.421089,1.167420,0.258068,-0.322602,-1.225852,-0.751379,1.442826,-0.327695,-0.232125,0.456124,0.557179,0.591787,0.918677,-0.003235,-1.202794,0.276321,-1.255111,0.395728,0.098440,-1.266009,-0.555869,0.290608,-0.631436,-0.349103,1.272150,0.628307,-1.343548,0.288847,0.711722,0.145935,-0.626880,0.445570,0.443029,0.205292,0.119290,0.396466,-1.229345,0.438750,-1.078162,-0.469652,0.886576,0.059882,     
     //laikago2: 2.066462,-0.834926,0.805580,-0.161518,-0.488355,1.389714,1.929823,-0.870937,1.244074,0.146926,-1.195141,-2.414130,-0.546360,-0.586745,0.458437,0.569220,-1.995427,0.384660,0.986011,-0.771946,-1.394179,-0.614566,0.823363,-1.813570,-0.290287,-1.429859,-2.275980,0.048680,-2.198435,-0.158800,-1.117721,0.588935,1.828229,-0.001829,1.021784,0.143050,-0.742747,-0.346497,0.267530,-1.021009,-1.172610,-0.425166,0.196986,1.084623,-0.893764,2.444223,-1.575589,0.280589,-2.186618,-0.095965,-0.588778,-0.211079,0.808877,0.274705,-0.114895,-0.711893,1.155735,0.061966,-0.127951,-0.606154,1.343382,-0.514560,-0.576799,-0.296179,-0.203917,-0.545115,0.325739,-0.196291,-0.421881,0.097086,0.100835,-1.480190,0.225522,3.022594,-0.875409,-0.847919,-0.817739,-0.259954,0.139819,0.194306,2.305412,-0.778943,-0.943723,1.136028,0.623575,-1.908913,2.034685,0.475603,-0.952494,1.071909,1.147008,-1.241621,-0.015953,-0.751813,1.085393,2.634974,0.831475,-1.258254,0.709759,-0.052918,0.895448,-2.242410,-1.375788,-0.972622,0.000042,-0.963293,-0.003472,0.601193,0.423208,-0.079784,1.513490,0.708033,2.222332,1.965002,1.418572,-0.019042,-0.145035,2.409394,0.035917,-1.127889,1.343124,-0.916178,0.810727,0.089117,-1.841758,-1.694236,1.588487,-0.670406,-0.622609,-0.737355,-1.179125,-0.668964,0.326845,-1.512919,0.842790,-0.810296,1.275978,-1.506449,-0.001190,-0.854443,-0.084633,1.203594,-0.707334,2.489149,-1.199703,-0.723721,2.277719,-1.022468,-1.865526,0.178955,-1.955405,2.677800,-0.509250,-0.754880,0.385542,0.921942,-0.299822,1.962247,0.554101,-1.864838,0.600580,0.493387,1.237839,-0.091695,0.564996,-0.943829,-0.652439,1.183302,0.699265,0.552656,1.360592,-0.465853,0.611154,0.118041,0.456649,-0.242802,-0.767618,-1.567798,1.324191,0.968878,1.650501,1.061869,0.062806,-0.021811,0.188692,0.257659,0.183502,0.725879,1.657137,0.224573,0.417197,0.959573,-1.042512,-2.037322,1.534032,0.574484,-1.864883,-0.038492,-1.175757,-0.590044,0.601925,0.418380,-0.024568,0.296417,1.770512,-1.086510,-0.277456,-2.228457,0.375215,1.395732,0.195897,2.363491,-0.271107,-0.504976,-0.444697,-2.622562,-1.676544,1.440932,1.744623,0.648712,-0.917891,0.066143,1.513886,0.279930,0.453033,0.749117,0.375520,-0.152195,3.265926,-0.475938,2.262664,0.002595,-3.325554,-1.012317,-1.355024,2.522240,-0.038132,-0.160627,-0.362697,0.731186,-1.138759,0.021992,-0.270059,0.744669,0.133221,1.887308,-1.578097,-1.016078,0.724435,-1.416610,0.738433,-1.371240,0.600763,-1.805924,-2.067587,0.055372,-0.292338,0.093598,-1.038665,1.268166,0.171423,0.449018,1.492221,0.486762,0.431795,-0.946956,-0.288453,-1.106365,-0.250114,-0.216180,-1.270692,-0.946693,-0.330664,-0.434228,0.073270,1.500914,1.210244,-1.567221,-0.749399,0.429259,-1.821224,-0.993160,-0.190774,-1.400342,-1.402246,-0.483304,-0.623283,-0.785370,0.298800,-1.177611,1.649164,-1.736606,0.654282,-0.752335,0.303796,-1.529469,-0.749372,-0.118387,-1.289428,0.893157,1.361673,0.066693,-0.148487,-0.630067,-0.516075,-0.502051,0.799510,-0.773371,-0.434328,-1.632729,0.700035,1.211436,0.808316,1.024715,-2.147695,0.897457,1.313404,-0.051731,-0.854917,1.746323,0.010586,0.260442,0.599340,-0.025379,-1.658972,0.061685,-0.525405,1.483137,0.128006,1.137537,1.305756,-0.526198,0.988853,0.100274,1.394097,1.457506,-0.138152,0.874316,0.588915,0.063143,1.422442,-0.398823,1.418623,-0.145936,-1.667441,0.602530,0.145462,-0.436727,-2.180442,-0.147401,0.101176,1.887284,0.422957,-0.279970,-1.541618,0.093866,-0.462106,-0.201542,-2.093679,-0.195472,-1.407638,-0.483399,0.038972,-0.165522,1.226892,-0.039571,-0.176016,-1.561450,1.287949,-2.882412,-0.352289,1.265740,0.537775,1.081382,0.018117,-1.232721,2.668544,1.385351,0.186621,0.388680,-0.743046,-1.079238,-1.106958,-1.641706,0.308060,-1.242300,1.582449,-1.118264,-0.305372,1.198758,-0.916624,-1.495650,-1.046569,-0.851798,-3.138478,-0.100598,1.350824,0.162079,-0.804351,-0.974443,-0.680371,-0.404901,-1.381699,-1.278382,0.682571,-1.347578,0.803979,-0.399614,0.906797,-1.186078,-0.244394,0.370885,0.315691,-0.172627,0.727006,2.398140,-0.066329,-0.780494,-0.052059,-1.813820,0.362512,2.203572,0.083033,1.303697,-0.090950,-0.273402,0.542213,0.798257,-0.498197,-0.562119,-1.127126,-0.262155,1.731340,0.217595,-0.904653,-0.093257,-0.762554,0.419129,0.424839,1.152589,1.399404,0.969007,0.675000,0.272626,1.426188,-0.546299,0.726281,1.331154,-0.924487,0.316355,-0.683732,0.500702,-0.134023,-0.229483,1.374152,0.245220,
     0.341436,-0.382980,1.473858,-0.100947,0.337707,-3.214974,-0.271588,1.496463,0.347998,-0.182418,-0.890516,1.619615,-1.804447,2.339298,-3.198182,0.209089,-0.220839,-2.033201,0.427946,2.047448,-1.105520,-0.111540,1.369103,-0.125971,-1.623144,0.682733,-0.025228,-3.676054,2.436119,0.853863,0.572019,0.377398,1.288971,-3.797144,-0.252711,-3.133911,1.047999,1.637581,-1.796407,0.517812,-1.293242,2.396125,-0.241165,-0.579746,2.381659,-1.518990,0.576045,0.845260,-0.506156,-0.975242,-0.457697,-1.289399,-2.109809,-0.107872,1.365424,-1.750132,-1.692323,-1.090481,-0.621535,0.236616,-0.110473,2.197656,-1.018896,4.599750,-1.445607,-0.437806,-1.406687,-0.545866,0.747575,0.959466,1.123795,2.435696,-0.163912,1.157814,-1.365901,0.274158,1.213548,-2.492444,2.140807,-0.528972,-1.377189,-0.007434,2.589191,-1.640965,1.405806,-1.017995,-2.850694,-0.359213,3.145937,-1.778374,1.723817,0.850079,2.668517,1.079442,3.388372,-0.734462,-0.155193,0.137627,-2.444018,1.494330,-0.624057,0.095275,-4.294688,0.170894,1.261364,1.656367,2.708757,0.524835,-0.960594,0.088406,1.392671,-2.674084,-2.409675,-0.475161,-0.043124,-1.988352,1.864763,-2.885875,-0.500966,-3.715675,-1.444805,0.558530,3.010658,-2.821033,-0.439848,0.652537,-2.027986,-1.384816,-0.442393,-2.476037,1.719759,-3.313050,0.996906,0.614519,0.103837,1.070068,-1.070471,-2.545218,-0.239586,1.996992,-0.654927,4.628826,-2.592264,0.150619,2.521815,-1.299341,-2.549808,0.673026,1.118770,-3.069061,-0.135503,0.096565,1.181648,1.390011,-1.922187,1.158191,-0.529193,0.470237,0.308073,1.065719,-0.532514,2.448745,-0.410294,2.639646,0.391523,1.826551,1.084658,-0.939162,0.980140,-0.793784,-0.066102,-0.766239,-0.225238,1.312386,1.591630,0.530542,0.300750,-0.761904,-0.669636,0.080775,1.028512,-0.875389,-0.157074,1.037277,0.262421,-0.073994,1.230152,-1.335279,2.707968,2.767648,-0.820395,0.536879,1.190015,1.251261,1.210581,0.568941,-1.591061,3.213564,-0.330560,-0.196432,0.951629,0.086824,0.362154,-2.531032,2.945787,0.347018,-1.567721,-2.089512,1.444064,-0.829190,-0.416205,-2.316878,-0.455070,-0.096060,-0.806708,-0.260170,0.697894,2.458612,-1.613032,-1.328343,-1.703035,1.101839,-0.390114,1.067343,1.459356,-0.955866,2.199086,3.773115,0.141223,-1.961227,0.461975,-0.197365,-1.415224,0.811403,-1.439768,-2.226343,0.484502,0.498078,-2.420139,1.367388,0.981426,-0.153652,-0.060196,-0.033531,-0.144590,0.467919,-2.629455,-1.966825,-0.436422,0.128379,0.530077,0.484659,2.241254,0.622061,2.252414,2.236139,-1.204385,-1.084889,0.038133,-1.866936,-1.493360,2.887547,-2.684584,-0.200430,0.176809,-1.642326,-1.530538,1.111308,-1.232897,-0.155513,2.691931,-2.455890,-0.379389,0.038242,1.974106,-0.769625,1.161304,0.294405,0.704215,-0.558288,-0.140963,-0.757363,0.786246,-2.785134,-0.708384,0.672917,0.309603,-0.303173,-1.951525,0.847966,-1.197357,-0.460295,-0.318921,-3.510597,0.268738,-0.421650,0.015463,1.675172,0.093180,-1.024773,-0.584287,4.298994,0.391455,-1.713227,-0.302529,0.572000,-0.036302,-3.037589,-2.831731,2.010224,-0.107265,1.141096,2.377263,-2.727115,-0.479632,-0.373716,-1.289849,-0.036594,-2.119634,-1.145639,0.249792,0.819643,0.247665,1.022145,-2.363124,1.794220,-1.295929,1.464450,0.000050,-1.457365,1.998757,-0.136696,0.764067,-2.053903,-2.605561,-1.394385,-0.330102,-0.587938,1.746063,-2.402911,2.843604,0.087656,-2.116997,0.659310,1.494353,0.611523,-0.340088,1.202859,1.022631,-1.046155,3.806324,2.169945,0.303889,2.250443,-0.648843,1.255763,-0.977780,-3.467736,-0.171379,0.072903,-2.061870,-1.608999,0.952997,1.520506,2.183207,0.667712,-0.209520,0.832441,-0.859119,1.120183,2.360721,-0.532222,2.057221,-0.474716,0.509019,0.390797,0.207184,-0.130267,-0.087830,-0.730706,-0.209076,-1.376516,-2.700442,-2.228430,1.417947,-1.007177,-0.215530,1.802210,-2.689386,-4.052407,1.114279,1.955401,-0.431302,-0.487472,-0.704123,-0.050940,-0.036050,-0.645731,-2.475331,1.183290,1.406323,-1.755209,2.675263,0.074638,2.255910,-0.814171,1.466480,1.412941,1.485928,1.983024,1.855624,-1.712752,-1.585367,-2.427288,0.682515,0.730792,-1.285732,-0.403423,-2.328921,2.109967,0.601918,0.330208,2.663227,2.921822,-2.542434,-1.803643,-0.072492,0.754258,-0.401320,-0.565745,0.945094,-1.094871,0.176833,-2.590063,1.455718,4.012594,0.082255,0.068777,-0.385901,3.741211,2.073043,1.666235,0.642738,0.099792,
     //ant: 0.061017,-0.324089,0.495781,0.360212,-0.335366,0.177660,0.449653,0.336630,-1.147657,0.266151,1.210979,1.394969,0.380862,1.182575,0.446213,0.527063,0.058357,0.777975,-0.214842,0.445587,-0.318401,-0.305296,0.965330,0.838523,1.139864,-1.580994,0.277611,-0.077304,1.002177,0.845712,0.007117,0.299204,-0.248282,0.010568,-0.799640,-0.648757,0.833910,-0.498645,0.427553,0.834371,0.626754,0.420726,-0.393453,-0.600011,0.359876,-0.246533,0.538868,0.634136,-0.241568,-0.543582,-0.678181,-0.968655,-0.303962,-0.519818,-0.614094,-0.703929,-0.647543,0.056444,0.140200,0.714154,-0.781970,-0.007197,-0.560105,0.542395,0.191484,0.062585,-0.065666,-0.320316,-0.447372,0.569221,-0.693875,-0.429876,-0.364902,0.519549,1.082314,-0.022809,0.630833,-0.539213,-0.402369,1.559619,-0.931123,0.563614,1.572111,0.604355,0.699923,1.028579,0.484426,-0.043880,0.735118,0.052495,0.287925,1.804493,0.344908,0.112037,-1.041180,-0.308867,-0.948935,-0.390033,0.378687,-0.321930,-0.575199,0.860922,-0.756749,-0.839265,-0.360313,-0.232525,-0.720368,0.451130,0.634194,-1.495908,0.963902,-0.162955,0.337085,0.269667,-1.176251,0.025329,-0.152245,-0.479661,-0.045681,0.485024,-1.130435,0.949953,0.323676,-0.692019,0.007512,0.282612,-0.662055,-0.365825,0.208501,-0.333526,-1.033647,0.520739,0.008498,-0.411063,-0.401415,0.278980,-0.110600,-0.168991,1.185840,-0.336276,0.545424,0.110246,-1.231273,0.322392,0.340689,-0.338142,0.220424,1.743014,-0.282103,-0.554238,-0.373501,-0.455406,-0.707646,-0.748044,-0.633395,0.556576,0.046407,0.556756,0.629615,0.295639,0.348281,0.098161,-0.474903,-1.076566,-0.206906,-1.886053,0.186712,0.226717,0.675222,-0.342709,0.390437,0.501222,0.035856,-0.719866,-1.085327,-0.159857,0.881351,-0.260031,-0.585085,-1.102257,-0.157398,0.710153,-0.284464,-0.750697,0.162968,-0.853662,0.308423,0.140021,0.047339,-0.744168,0.273951,0.590746,0.618467,-0.533088,0.058645,0.859890,0.040624,-0.834786,0.828809,0.055892,1.029427,-0.464314,0.729726,-0.459467,0.942697,-0.494293,0.287873,-0.269639,0.699567,0.129866,0.711873,-0.260676,0.528852,-0.469844,0.971521,-0.519352,-0.051210,-0.594905,0.343275,0.281431,-0.106296,0.436830,-0.108877,-0.621062,0.172908,0.901850,0.723859,-0.594134,-0.240960,0.697856,-1.124607,1.177756,
  };

#if 0
  std::ifstream weightsfile_;
  std::string fileName = "d:/ant_weights_5044.074185.bin";
  weightsfile_.open (fileName, std::ios_base::binary);
  int num_weights = 0;
  weightsfile_.read((char*)&num_weights, sizeof(int));
  x.resize(num_weights);
  for (int i=0; i < num_weights; i++)
  {
      weightsfile_.read((char*)&x[i], sizeof(float));
      printf("%f,", x[i]);
  }
  weightsfile_.close();
#endif

  env.init_neural_network(x);
  bool done = false;
  env.contact_sim.dt = 1e-3;
  while (!done && num_steps < max_steps) {
    {
      auto action = env.policy(obs);
      MyScalar reward;

      env.step(action, obs, reward, done);
      visualizer.sync_visual_transforms(env.contact_sim.mb_);
      total_reward += reward;
      num_steps++;
      int num_contacts = 0;
      for (int c = 0; c < env.contact_sim.world.mb_contacts_.size(); c++) {
        for (int j = 0; j < env.contact_sim.world.mb_contacts_[c].size(); j++) {
          if (env.contact_sim.world.mb_contacts_[c][j].distance < 0.01) {
            num_contacts++;
          }
        }
      }

      if (done || num_steps >= max_steps) {
        printf("total_reward=%f\n", total_reward);
        total_reward = 0;
        num_steps = 0;
        obs = env.reset();
        break;
      }
      visualizer.render();
    }
  }
  return EXIT_SUCCESS;
}
